# app.py
import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv

st.set_page_config(page_title="NutriPlanner AI", page_icon="ü•ó", layout="wide")

load_dotenv()

# Configurar a API Key do Google
try:
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        st.error("Chave da API do Google n√£o encontrada. Verifique seu arquivo .env.")
        st.stop() # Impede a execu√ß√£o do restante do script se a chave n√£o for encontrada
    genai.configure(api_key=api_key)
except Exception as e:
    st.error(f"Erro ao configurar a API do Google: {e}")
    st.stop()

generation_config = {
    "temperature": 0.7,
    "top_p": 0.95,
    "top_k": 0,
}
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

# Inicializar o modelo
try:
    model = genai.GenerativeModel(
        model_name="gemini-2.0-flash",
        generation_config=generation_config,
        safety_settings=safety_settings
    )
except Exception as e:
    st.error(f"Erro ao inicializar o modelo Generativo: {e}")
    st.stop()

if 'historico_cardapios' not in st.session_state:
    st.session_state.historico_cardapios = []

if 'tipo_planejamento' not in st.session_state:
    st.session_state.tipo_planejamento = "Dias"


st.title("ü•ó NutriPlanner AI: Seu Planejador de Card√°pio Inteligente")
st.markdown("Preencha os campos abaixo para gerar um card√°pio semanal personalizado!")


# Colunas para melhor organiza√ß√£o dos inputs
col1, col2 = st.columns(2)

with col1:
    tipo_planejamento = st.radio(
        "Planejar por:",
        ("Dias", "Semanas/Meses"),
        index=0, # Padr√£o: Dias
        horizontal=True,
        key="tipo_planejamento" # Adicionar uma chave para referenciar o estado
    )

    if st.session_state.tipo_planejamento == "Dias":
        dias_semana = st.number_input(
            "Para quantos dias voc√™ quer o card√°pio?",
            min_value=1, max_value=30, value=3, step=1, # Aumentei o max_value para dias, caso queira at√© 1 m√™s
            help="Defina o n√∫mero de dias para o planejamento (1 a 30)."
        )
        periodo_texto = f"{dias_semana} dias"
    else: # Semanas/Meses
        # Desabilitar o input de dias quando meses √© selecionado
        dias_semana_placeholder = st.empty() # Criar um placeholder
        with dias_semana_placeholder:
            st.number_input(
                "Para quantos dias voc√™ quer o card√°pio?",
                min_value=1, max_value=7, value=7, step=1,
                help="Defina o n√∫mero de dias para o planejamento (1 a 7).",
                disabled=True # Desabilitado
            )

        num_semanas = st.number_input(
            "Para quantas semanas voc√™ quer o card√°pio?",
            min_value=1, max_value=12, value=1, step=1, # Ex: at√© 3 meses (12 semanas)
            help="Defina o n√∫mero de semanas para o planejamento (1 a 12)."
        )
        dias_semana = num_semanas * 7 # Calcular o total de dias para o prompt
        periodo_texto = f"{num_semanas} semana(s)"
        if num_semanas >=4:
            meses_aprox = round(num_semanas / 4)
            periodo_texto = f"aproximadamente {meses_aprox} m√™s(es) ({num_semanas} semanas)"
            
    refeicoes_opcoes = ["Caf√© da Manh√£", "Lanche da Manh√£", "Almo√ßo", "Lanche da Tarde", "Jantar", "Ceia"]
    refeicoes_selecionadas = st.multiselect(
        "Quais refei√ß√µes incluir?",
        refeicoes_opcoes,
        default=["Caf√© da Manh√£", "Almo√ßo", "Jantar"],
        help="Selecione as refei√ß√µes que deseja planejar."
    )
    objetivo = st.selectbox(
        "Qual seu objetivo principal com o card√°pio?",
        [
            "Alimenta√ß√£o Saud√°vel Geral",
            "Perda de Peso (D√©ficit Cal√≥rico Leve)",
            "Ganho de Massa Muscular (Super√°vit Cal√≥rico Leve)",
            "Praticidade e Rapidez no Preparo",
            "Economia (Ingredientes Acess√≠veis)",
            "Vegetariano/Vegano",
            "Baixo Carboidrato (Low Carb)",
            "Controle da Diabetes (√çndice Glic√™mico Baixo/Moderado)",
            "Controle da Hipertens√£o (Baixo S√≥dio)" 
        ],
        index=0, # Padr√£o: Alimenta√ß√£o Saud√°vel Geral
        help="Escolha o foco principal do seu plano alimentar."
    )

with col2:
    preferencias = st.text_area(
        "Prefer√™ncias alimentares e alimentos que voc√™ GOSTA:",
        placeholder="Ex: adoro peixe e frango, prefiro vegetais cozidos, gosto de frutas c√≠tricas...",
        height=100,
        help="Liste alimentos ou tipos de pratos que voc√™ aprecia."
    )
    restricoes = st.text_area(
        "Restri√ß√µes, alergias ou alimentos que voc√™ N√ÉO GOSTA/N√ÉO PODE COMER:",
        placeholder="Ex: sem gl√∫ten, intoler√¢ncia √† lactose, alergia a amendoim, n√£o como carne vermelha...",
        height=100,
        help="Importante para personalizar seu card√°pio e evitar ingredientes indesejados."
    )
    ingredientes_casa = st.text_area(
        "Ingredientes que voc√™ j√° tem em casa e gostaria de usar (opcional):",
        placeholder="Ex: arroz, feij√£o, batata, ovos, uma caixa de tomates...",
        height=100,
        help="Ajuda a IA a sugerir receitas que aproveitem o que voc√™ j√° tem."
    )

# Bot√£o para gerar o card√°pio
if st.button("‚ú® Gerar Meu Card√°pio Inteligente!", use_container_width=True):
    if not dias_semana or not refeicoes_selecionadas:
        st.warning("Por favor, preencha pelo menos o n√∫mero de dias e as refei√ß√µes desejadas.")
    else:
        # Montar o prompt para a IA
        prompt_partes = [
            "Voc√™ √© um nutricionista e chef de cozinha virtual especializado em criar card√°pios semanais personalizados, chamado NutriPlanner AI.",
            f"Por favor, crie um plano de refei√ß√µes detalhado para {dias_semana} dias, incluindo as seguintes refei√ß√µes: {', '.join(refeicoes_selecionadas)}.",
            f"O objetivo principal do usu√°rio √©: {objetivo}.",
            f"Prefer√™ncias alimentares (alimentos que gosta): {preferencias if preferencias else 'Nenhuma espec√≠fica, mas priorize variedade e sabor.'}.",
            f"Restri√ß√µes, alergias ou alimentos a evitar: {restricoes if restricoes else 'Nenhuma espec√≠fica.'}.",
            f"Ingredientes que o usu√°rio j√° tem em casa e gostaria de aproveitar (se poss√≠vel): {ingredientes_casa if ingredientes_casa else 'Nenhum espec√≠fico, utilize ingredientes comuns e acess√≠veis.'}.",
            "\nO card√°pio deve ser:",
            "- Balanceado, nutritivo e saboroso.",
            "- Variado, evitando repeti√ß√µes excessivas de pratos principais nos mesmos dias ou dias seguidos, a menos que seja pr√°tico (ex: sobras para o almo√ßo do dia seguinte).",
            "- Com sugest√µes de pratos e prepara√ß√µes que sejam relativamente f√°ceis ou de complexidade m√©dia, adequados para o dia a dia.",
            "- Para cada refei√ß√£o, sugira o prato principal e, se aplic√°vel, acompanhamentos ou complementos.",
            "- Se o objetivo for perda de peso ou ganho de massa, tente adequar as sugest√µes, mas sem prescrever calorias exatas (apenas direcione para alimentos mais leves ou mais proteicos, conforme o caso).",
            "\nApresente o card√°pio de forma clara e organizada, dia por dia e refei√ß√£o por refei√ß√£o. Use markdown para formata√ß√£o (negrito para dias e refei√ß√µes).",
            "Exemplo de formato para cada dia:",
            "**Dia 1:**",
            f"  - **{refeicoes_selecionadas[0] if len(refeicoes_selecionadas) > 0 else 'Refei√ß√£o 1'}**: [Sugest√£o detalhada do prato]",
            f"  - **{refeicoes_selecionadas[1] if len(refeicoes_selecionadas) > 1 else 'Refei√ß√£o 2'}**: [Sugest√£o detalhada do prato]",
            "  ...",
            "\nAo final do card√°pio, adicione uma se√ß√£o chamada '**Lista de Compras Sugerida:**'",
            "Nesta se√ß√£o, liste os principais ingredientes frescos e chave (vegetais, frutas, prote√≠nas, latic√≠nios/alternativas) necess√°rios para preparar as refei√ß√µes do card√°pio gerado.",
            "N√£o precisa listar temperos b√°sicos como sal, pimenta, azeite, a menos que seja algo muito espec√≠fico.",
            "Organize a lista de compras por categorias (Ex: Vegetais, Frutas, Prote√≠nas, Gr√£os/Carboidratos, Latic√≠nios/Outros) para facilitar.",
            "O tom deve ser amig√°vel, encorajador e profissional."
        ]

        condicoes_especiais_prompt = []
        if objetivo == "Controle da Diabetes (√çndice Glic√™mico Baixo/Moderado)":
            condicoes_especiais_prompt.append(
                "Foco em alimentos de baixo a moderado √≠ndice glic√™mico, ricos em fibras. Evitar a√ß√∫cares simples e carboidratos refinados em excesso."
            )
        if objetivo == "Controle da Hipertens√£o (Baixo S√≥dio)":
            condicoes_especiais_prompt.append(
                "Priorizar alimentos com baixo teor de s√≥dio. Evitar alimentos processados, embutidos e enlatados com alto s√≥dio. Incentivar o uso de temperos naturais."
            )

        if condicoes_especiais_prompt:
            prompt_partes.append("\nConsidera√ß√µes Especiais de Sa√∫de (baseadas no objetivo):")
            prompt_partes.extend(condicoes_especiais_prompt)

        prompt_partes.append(
            "\nIMPORTANTE: Se o usu√°rio listar prefer√™ncias alimentares que s√£o claramente contraindicadas para o objetivo de sa√∫de selecionado (ex: doces para diab√©ticos, alimentos salgados para hipertensos), o card√°pio N√ÉO deve incluir esses alimentos. Em vez disso, ap√≥s gerar o card√°pio adequado, adicione uma se√ß√£o de ALERTA ao final, explicando de forma amig√°vel por que certos alimentos preferidos n√£o foram inclu√≠dos e sugerindo alternativas saud√°veis se poss√≠vel."
        )
        prompt_completo = "\n".join(prompt_partes)

        st.markdown("---")
        st.subheader("‚è≥ Gerando seu card√°pio...")
        st.caption("Lembre-se: O NutriPlanner AI oferece sugest√µes e n√£o substitui o aconselhamento de um nutricionista ou m√©dico. Consulte um profissional para orienta√ß√µes personalizadas.")
        #st.info(f"**Debug do Prompt (para voc√™, desenvolvedor):**\n```\n{prompt_completo}\n```") # Linha de debug, remova ou comente depois

        try:
            with st.spinner("O NutriPlanner AI est√° pensando no seu card√°pio... Aguarde um instante! üßë‚Äçüç≥"):
                response = model.generate_content(prompt_completo)

            texto_resposta = response.text
            alerta_inicio = texto_resposta.upper().find("ALERTA:")

            if alerta_inicio != -1:
                cardapio_texto = texto_resposta[:alerta_inicio].strip()
                alerta_texto = texto_resposta[alerta_inicio:].strip()

                st.markdown("---")
                st.subheader("üìÖ Seu Card√°pio Personalizado by NutriPlanner AI:")
                st.markdown(cardapio_texto)

                st.markdown("---")
                st.warning(alerta_texto)
            else:
                st.markdown("---")
                st.subheader("üìÖ Seu Card√°pio Personalizado by NutriPlanner AI:")
                st.markdown(texto_resposta)

            # Salvar no hist√≥rico de card√°pios
            interacao_atual = {
                "inputs": {
                    "periodo": periodo_texto,
                    "refeicoes": refeicoes_selecionadas,
                    "objetivo": objetivo,
                    "preferencias": preferencias,
                    "restricoes": restricoes,
                    "ingredientes_casa": ingredientes_casa
                },
                "cardapio_gerado": texto_resposta
            }
            st.session_state.historico_cardapios.append(interacao_atual)

        except Exception as e:
            st.error(f"Ocorreu um erro ao gerar o card√°pio: {e}")
            st.error("Por favor, tente refinar seus inputs ou tente novamente mais tarde.")

st.markdown("---")
st.subheader("üìú Hist√≥rico de Card√°pios Gerados")

if not st.session_state.historico_cardapios:
    st.caption("Nenhum card√°pio gerado nesta sess√£o ainda.")
else:
    # Mostrar o hist√≥rico em ordem reversa (mais recente primeiro)
    for i, interacao in enumerate(reversed(st.session_state.historico_cardapios)):
        with st.expander(f"Card√°pio {len(st.session_state.historico_cardapios) - i} (Objetivo: {interacao['inputs']['objetivo']} para {interacao['inputs']['periodo']})"):
            st.markdown("**Prefer√™ncias e Restri√ß√µes Informadas:**")
            st.json({key: val for key, val in interacao['inputs'].items() if key not in ['periodo', 'refeicoes', 'objetivo']}) # Mostrar outros inputs
            st.markdown("**Card√°pio Gerado:**")
            st.markdown(interacao['cardapio_gerado'])

st.markdown("---")
st.caption("NutriPlanner AI - Desenvolvido para a Imers√£o IA da Alura.")